{"componentChunkName":"component---src-templates-blog-post-js","path":"/leetcode106/","result":{"data":{"site":{"siteMetadata":{"title":"Chenxiao's Blog","author":"Chenxiao Guan"}},"markdownRemark":{"id":"8040c9d0-daa6-5fbd-bcf4-0fe25d915272","excerpt":"105的题目为：reconstruct the binary tree from Preorder and Inorder traversal of the tree. 106题目为：reconstruct the binary tree from Postorder and Inorder traversal of…","html":"<p>105的题目为：reconstruct the binary tree from <em>Preorder</em> and <em>Inorder</em> traversal of the tree.</p>\n<p>106题目为：reconstruct the binary tree from <em>Postorder</em> and <em>Inorder</em> traversal of the tree.</p>\n<p>两道题基本上是一样的。先来看一下代码实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// leetcode 105 inorder and preorder</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    TreeNode<span class=\"token operator\">*</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> preorder<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> inorder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> preStart <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">,</span> preStart<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    TreeNode<span class=\"token operator\">*</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> preorder<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> inorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> preStart<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> inStart<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> inEnd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preStart <span class=\"token operator\">>=</span> preorder<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> inStart <span class=\"token operator\">>=</span> inEnd<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> preorder<span class=\"token punctuation\">[</span>preStart<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        TreeNode<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> inStart<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> inEnd<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                mid <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">++</span>preStart<span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">,</span> preStart<span class=\"token punctuation\">,</span> inStart<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">,</span> preStart<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> inEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// leetcode 106 inorder and postorder</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    TreeNode<span class=\"token operator\">*</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> inorder<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> postorder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// solve it through recursion</span>\n        <span class=\"token keyword\">int</span> postFirst <span class=\"token operator\">=</span> postorder<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">,</span> postorder<span class=\"token punctuation\">,</span> postFirst<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    TreeNode<span class=\"token operator\">*</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> inorder<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> postorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> postFirst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> inFirst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> inEnd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>postFirst <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> inFirst <span class=\"token operator\">>=</span> inEnd<span class=\"token punctuation\">)</span> \n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> postorder<span class=\"token punctuation\">[</span>postFirst<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        TreeNode<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> inFirst<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> inEnd<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                mid <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">--</span>postFirst<span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">,</span> postorder<span class=\"token punctuation\">,</span> postFirst<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> inEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">,</span> postorder<span class=\"token punctuation\">,</span> postFirst<span class=\"token punctuation\">,</span> inFirst<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>思路</h3>\n<p>假设我们有preorder和inorder的traversal为如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">preorder = [3,9,20,15,7]\ninorder = [9,3,15,20,7]</code></pre></div>\n<p>那么构造出的tree为如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    3\n   / \\\n  9  20\n    /  \\\n   15   7</code></pre></div>\n<p>首先我们知道，preorder数组的第一个元素就是我们最终的root；这两道题我们都假设每一个node的值是不相等的，所以我们知道root的值以后就知道他在preorder中的位置了，如此一来我们就可以以root为中心，将preorder traverse分成左右两部分，分别就是root的两个children的所有node。那我们就可以在recursively对两个children进行构造即可。</p>\n<h2>Leetcode #108</h2>\n<p>一道和上边两道题类似的但是更简单的题目：给定一个sorted array，根据这个array来build一个balanced BST。</p>\n<h3>思路</h3>\n<p>找到array的中点作为root，递归将左右变为balanced BST即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    TreeNode<span class=\"token operator\">*</span> <span class=\"token function\">sortedArrayToBST</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">sortedArrayToBST</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    TreeNode<span class=\"token operator\">*</span> <span class=\"token function\">sortedArrayToBST</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> begin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>begin <span class=\"token operator\">>=</span> end<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>begin <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        TreeNode<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> <span class=\"token function\">sortedArrayToBST</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> begin<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> <span class=\"token function\">sortedArrayToBST</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"leetcode 105 & 106: Construct Binary Tree from Preorder, Postorder and Inorder Traversal","date":"August 20, 2019","description":"两道类似的medium题目。binary tree, bfs, dfs, tree traversal"}}},"pageContext":{"slug":"/leetcode106/","previous":{"fields":{"slug":"/leetcode98/"},"frontmatter":{"title":"Leetcode 98: Validate Binary Search Tree"}},"next":{"fields":{"slug":"/resume/"},"frontmatter":{"title":"Chenxiao Guan Resume - Software Engineer"}}}}}