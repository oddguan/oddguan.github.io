{"componentChunkName":"component---src-templates-blog-post-js","path":"/cppvector/","result":{"data":{"site":{"siteMetadata":{"title":"Chenxiao's Blog","author":"Chenxiao Guan"}},"markdownRemark":{"id":"c263c39a-5121-502f-b328-d318fc3a32c9","excerpt":"This is a walkthrough of how to implement the  in C++. Since I met this problem\nin a C++ intern interview, I want to write a blog post of how to recreate it in…","html":"<p>This is a walkthrough of how to implement the <code class=\"language-text\">std::vector</code> in C++. Since I met this problem\nin a C++ intern interview, I want to write a blog post of how to recreate it in the right way. </p>\n<p>Besides, as I am reading the book “The C++ Programming Language”, the author of the book is\ndoing the same thing in the second chapter of the book. This is basically a copy of that chapter.</p>\n<p>So let’s get started. In C++, a <code class=\"language-text\">vector</code> is basically a dynamically sized array. If you are coming from\na <code class=\"language-text\">Java</code> background, <code class=\"language-text\">vector</code> in C++ is just an <code class=\"language-text\">arraylist</code> in Java. If you are coming from a Python background, it is just your normal <code class=\"language-text\">list</code>. Probably all programming laguages have its own implementation of a dynamically sized array, <code class=\"language-text\">vector</code> is just happened to be the name of the one for C++.</p>\n<p>So, as we all may know, a dynamically sized array is just an api to a regular fixed sized array, with some tweaks into it. If we are going to create our own version of it, the first thing we probably want to do is to create a new class called <code class=\"language-text\">vector</code> that has a fixed sized array underneath. Since there is no way to get the size of an array in C++, we want to keep track of the size of the array in the class as well. So we would initially have two members in the class as followed: </p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">vector</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> m_elems<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> m_size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now we want to write the constructor of our <code class=\"language-text\">vector</code>. The first constructor takes the size of the array:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">vector</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> m_elems<span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> m_size<span class=\"token punctuation\">{</span>s<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>We want to override the <code class=\"language-text\">[]</code> operator so that we can access the value by using it, instead of having for example a <code class=\"language-text\">get</code> method to get the element by index. This is normally called a subscript function. We also need a method called <code class=\"language-text\">size</code> to retrieve the size of <code class=\"language-text\">vector</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_elems<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_size<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>It is considered to be a best practice to define the interface first, and then implement the functionalities of it later on. Therefore, if we rewrite our code in such a way, we get the following result:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">vector</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> m_elems<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> m_size<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">vector</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* construct with size */</span>\n    <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// size getter</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nvector<span class=\"token operator\">::</span><span class=\"token function\">vector</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> m_elems<span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> m_size<span class=\"token punctuation\">{</span>s<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> vector<span class=\"token operator\">::</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_size<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> vector<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_elems<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Okay, now we want to do some error handling. We clearly see that there is no such thing in our code above, and we at least want to tell the user when they are using the index that are out of bound. We can do that by checking it in the <code class=\"language-text\">[]</code> operator. Also, we want check the size passed into the constructor to be a valid number:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">vector<span class=\"token operator\">::</span><span class=\"token function\">vector</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> length_error<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    m_elems <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    m_size <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> vector<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">>=</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token function\">out_of_range</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vector::operator[]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We might also need a destructor. For now the only thing that we are managing is the underlying array, so we want to delete it after the container gets destructed. </p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token operator\">~</span><span class=\"token function\">vector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> m_elems<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We further need a initializer_list constructor just to make our lives easier. We can do so by writing:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">vector<span class=\"token operator\">::</span><span class=\"token function\">vector</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>initalizer_list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> l<span class=\"token punctuation\">)</span> \n    <span class=\"token operator\">:</span> m_elems<span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">{</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m_elems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Copy Constructors</h2>\n<p>We need to specify the copy constructor for our class as well. </p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">vector</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* ... */</span>\n    <span class=\"token function\">vector</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* copy constructor */</span>\n    vector<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* copy assgnment */</span>\n    <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nvector<span class=\"token operator\">::</span><span class=\"token function\">vector</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> m_elems<span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">.</span>m_size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> m_size<span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">.</span>m_size<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>m_elems<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>m_elems <span class=\"token operator\">+</span> a<span class=\"token punctuation\">.</span>m_size<span class=\"token punctuation\">,</span> m_elems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nvector<span class=\"token operator\">&amp;</span> vector<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">.</span>m_size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>m_size<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>m_elems<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> m_elems<span class=\"token punctuation\">;</span>\n    m_elems <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n    m_size <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>m_size<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I quote from the book: “A copy constructor and a copy assignment for a class X are typically declared to take an argument of type <code class=\"language-text\">const X&amp;</code>.”</p>\n<h2>Move Constructor</h2>\n<p>Besides the Copy constructor, we need the move constructor and move assignment as well. </p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">vector</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* ... */</span>\n    <span class=\"token function\">vector</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* move constructor */</span>\n    vector<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* move assignment */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nvector<span class=\"token operator\">::</span><span class=\"token function\">vector</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> m_elems<span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">.</span>m_elems<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> m_size<span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">.</span>m_size<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n        a<span class=\"token punctuation\">.</span>m_elems <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n        a<span class=\"token punctuation\">.</span>m_size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nvector<span class=\"token operator\">&amp;</span> vector<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    m_elems <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>m_elems<span class=\"token punctuation\">;</span>\n    m_size <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>m_size<span class=\"token punctuation\">;</span>\n    a<span class=\"token punctuation\">.</span>m_elems <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    a<span class=\"token punctuation\">.</span>m_size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In order to use the move constructor or assignment, we want to use them in the following way: </p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    vector <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    vector <span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    vector <span class=\"token function\">z</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* ... */</span>\n    z <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* z is a copy of x */</span>\n    y <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* y is a move of x */</span>\n    <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>After all, we get two copies of the same elements of the original <code class=\"language-text\">x</code>: one copy is stored in the variable <code class=\"language-text\">z</code>, and other copy is stored in variable <code class=\"language-text\">y</code>. Variable <code class=\"language-text\">x</code> shouldn’t be used after we call <code class=\"language-text\">std::move</code> on it. </p>\n<h2>C++ Generics</h2>\n<p>So far our implementation of the vector only supports integer type. This is obviously not ideal since we want to have a vector of any data type. We can use the template keyword to make our class supports generics. </p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">vector</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    T∗ m_elems<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* an array of type T */</span>\n    size_t m_size<span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">int</span> m_capacity<span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">vector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* default constructor */</span>\n    <span class=\"token function\">vector</span><span class=\"token punctuation\">(</span>size_t s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* takes a size */</span>\n    <span class=\"token function\">vector</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>initializer_list il<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* initializer list constructor */</span>\n    <span class=\"token function\">vector</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* copy constructor */</span>\n    <span class=\"token function\">vector</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&amp;&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* move constructor */</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">vector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> m_elems<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/* utils */</span>\n    T<span class=\"token operator\">*</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_elems <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    T<span class=\"token operator\">*</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_elems <span class=\"token operator\">+</span> m_size <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    size_t <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_size<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    T<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* copy assignment */</span>\n    T<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&amp;&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* move assignment */</span>\n    T<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* value changing indexing */</span>\n    <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* accessing indexing */</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>T e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    T <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> m_elems<span class=\"token punctuation\">[</span>m_size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">--</span>m_size<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* implementations */</span>\n<span class=\"token comment\">/* constructors */</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\nvector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">vector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    m_elems <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> T<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* default to capacity 2 */</span>\n    m_capacity <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    m_size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\nvector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">vector</span><span class=\"token punctuation\">(</span>size_t s<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> m_elems<span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> T<span class=\"token punctuation\">[</span>s <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> m_capacity<span class=\"token punctuation\">{</span>s <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> m_size<span class=\"token punctuation\">{</span>s<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\nvector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">vector</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>initializer_list il<span class=\"token punctuation\">)</span> \n    <span class=\"token operator\">:</span> m_elems<span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> T<span class=\"token punctuation\">[</span>il<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> m_capacity<span class=\"token punctuation\">{</span>il<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> m_size<span class=\"token punctuation\">{</span>il<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>il<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> il<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m_elems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\nvector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">vector</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span> \n    <span class=\"token operator\">:</span> m_elems<span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> T<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">.</span>m_size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> m_capacity<span class=\"token punctuation\">{</span>v<span class=\"token punctuation\">.</span>m_size <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> m_size<span class=\"token punctuation\">{</span>v<span class=\"token punctuation\">.</span>m_size<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m_elems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\nvector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">vector</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&amp;&amp;</span> v<span class=\"token punctuation\">)</span> \n    <span class=\"token operator\">:</span> m_elems<span class=\"token punctuation\">{</span>v<span class=\"token punctuation\">.</span>m_elems<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> m_capacity<span class=\"token punctuation\">{</span>v<span class=\"token punctuation\">.</span>m_capacity<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> m_size<span class=\"token punctuation\">{</span>v<span class=\"token punctuation\">.</span>m_size<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n    v<span class=\"token punctuation\">.</span>m_elems <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    v<span class=\"token punctuation\">.</span>m_capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    v<span class=\"token punctuation\">.</span>m_size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* utils */</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\nT<span class=\"token operator\">&amp;</span> vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    T<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> T<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">.</span>m_size <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> m_elems<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* delete old m_elems */</span>\n    m_elems <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n    m_size <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>m_size<span class=\"token punctuation\">;</span>\n    m_capacity <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>m_size <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\nT<span class=\"token operator\">&amp;</span> vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&amp;&amp;</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> m_elems<span class=\"token punctuation\">;</span>\n    m_elems <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>m_elems<span class=\"token punctuation\">;</span>\n    m_capacity <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>m_capacity<span class=\"token punctuation\">;</span>\n    m_size <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>m_size<span class=\"token punctuation\">;</span>\n    v<span class=\"token punctuation\">.</span>m_capacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    v<span class=\"token punctuation\">.</span>m_size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\nT<span class=\"token operator\">&amp;</span> vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> m_elems<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\nT<span class=\"token operator\">&amp;</span> vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> m_elems<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* interfaces */</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>T e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* makes a copy */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_size <span class=\"token operator\">>=</span> m_capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        T<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> T<span class=\"token punctuation\">[</span>m_capacity <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        std<span class=\"token operator\">::</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        p<span class=\"token punctuation\">[</span>m_size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> m_elems<span class=\"token punctuation\">;</span>\n        m_elems <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n        m_capacity <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span>\n        m_elems<span class=\"token punctuation\">[</span>m_size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>   \n    <span class=\"token operator\">++</span>m_size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"How to implement std::vector in C++","date":"May 22, 2019","description":"A walkthrough of reimplementing the std::vector in C++"}}},"pageContext":{"slug":"/cppvector/","previous":{"fields":{"slug":"/c++virtual/"},"frontmatter":{"title":"Virtual Functions in C++"}},"next":{"fields":{"slug":"/review01/"},"frontmatter":{"title":"复习专用"}}}}}