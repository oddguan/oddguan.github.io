{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogs/javascript01/","result":{"data":{"site":{"siteMetadata":{"title":"Chenxiao's Blog","author":"Chenxiao Guan"}},"markdownRemark":{"id":"33143930-6f71-57d7-8f8a-275585eee052","excerpt":"JavaScript Building Blocks: Types       (new in ES2015，也就是ES6)\n除了以上基础Types之外，JavaScript同时支持使用和, 以及，\n和。因此，一种更正确的Types分类形式为：             Numbers JavaScript…","html":"<h1 id=\"javascript-building-blocks-types\" style=\"position:relative;\"><a href=\"#javascript-building-blocks-types\" aria-label=\"javascript building blocks types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript Building Blocks: Types</h1>\n<ul>\n<li><code class=\"language-text\">Number</code></li>\n<li><code class=\"language-text\">String</code></li>\n<li><code class=\"language-text\">Boolean</code></li>\n<li><code class=\"language-text\">Function</code></li>\n<li><code class=\"language-text\">Object</code></li>\n<li><code class=\"language-text\">Symbol</code> (new in ES2015，也就是ES6)\n除了以上基础Types之外，JavaScript同时支持使用<code class=\"language-text\">null</code>和<code class=\"language-text\">undefined</code>, 以及<code class=\"language-text\">Array</code>，\n<code class=\"language-text\">Date</code>和<code class=\"language-text\">RegExp</code>。因此，一种更正确的Types分类形式为：</li>\n<li><code class=\"language-text\">Number</code></li>\n<li><code class=\"language-text\">String</code></li>\n<li><code class=\"language-text\">Boolean</code></li>\n<li><code class=\"language-text\">Symbol</code> </li>\n<li>\n<p><code class=\"language-text\">Object</code></p>\n<ul>\n<li><code class=\"language-text\">Function</code></li>\n<li><code class=\"language-text\">Array</code></li>\n<li><code class=\"language-text\">Date</code></li>\n<li><code class=\"language-text\">RegExp</code></li>\n</ul>\n</li>\n<li><code class=\"language-text\">null</code></li>\n<li><code class=\"language-text\">undefined</code></li>\n</ul>\n<h2 id=\"numbers\" style=\"position:relative;\"><a href=\"#numbers\" aria-label=\"numbers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Numbers</h2>\n<p>JavaScript是不支持纯所谓Integer的，也就是说Number Type就是floating point。\nJavaScript使用IEEE754 double precision (64-bits) floating point。\nJavaScript支持一个built-in的Object为<code class=\"language-text\">Math</code>，使用者可以用其进行一些数学运算。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token const\">circumference</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> r<span class=\"token punctuation\">;</span></code></pre></div>\n<p>JS支持使用<code class=\"language-text\">parseInt</code>来将<code class=\"language-text\">String</code>转换为<code class=\"language-text\">Number</code>。Function takes an optional second argument as the base of the string representation:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'010'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'11'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></code></pre></div>\n<p>There is a function called <code class=\"language-text\">parseFloat</code> which behaves similarly with <code class=\"language-text\">parseInt</code>\nbut doesn’t take a second argument. Instead, it always assumes base 10 representations.\nAn unary <code class=\"language-text\">+</code> sign can be used to convert string into numbers as well:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">+</span> <span class=\"token string\">'42'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span>\n<span class=\"token operator\">+</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">010</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\n<span class=\"token operator\">+</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">0x10</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 16</span></code></pre></div>\n<p>A special value called <code class=\"language-text\">NaN</code> (which stands for “Not a Number”) is used in JS:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span></code></pre></div>\n<p>Any mathematical operation operating on <code class=\"language-text\">NaN</code> will also return <code class=\"language-text\">NaN</code> (which is quite toxic…):</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token number\">NaN</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span></code></pre></div>\n<p>One can use the built-in function <code class=\"language-text\">isNaN</code> to test whether a value is <code class=\"language-text\">NaN</code> or not:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>JS also supports two Infinity values:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token number\">Infinity</span>\n<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">-</span><span class=\"token number\">Infinity</span></code></pre></div>\n<p>One can also test whether a value is infinity of not by using the <code class=\"language-text\">isFinite</code> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">isFinite</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token function\">isFinite</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token function\">isFinite</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>One thing to point out for comparing the difference between <code class=\"language-text\">+</code> and <code class=\"language-text\">parseInt</code>,<code class=\"language-text\">parseFloat</code> is that, two parse functions will terminate once they hit invalid characters and return the value up to that point, whereas the <code class=\"language-text\">+</code> operand will simply return <code class=\"language-text\">NaN</code> if a invalid argument is given:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">+</span> <span class=\"token string\">'10.2abc'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'10.2abc'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\n<span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'10.2abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10.2</span></code></pre></div>","frontmatter":{"title":"JavaScript从零开始01 | Numbers","date":"February 10, 2019","description":"此篇笔记为从零开始学习JavaScript的第一篇,作为我系统性学习JavaScript的开始。此系列将会以英文为主。主要学习资料为Mozilla的Documentation。"}}},"pageContext":{"slug":"/javascript01/","previous":null,"next":{"fields":{"slug":"/javascript02/"},"frontmatter":{"title":"JavaScript从零开始02 | Types"}}}}}