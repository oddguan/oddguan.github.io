{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogs/javascript02/","result":{"data":{"site":{"siteMetadata":{"title":"Chenxiao's Blog","author":"Chenxiao Guan"}},"markdownRemark":{"id":"7d831dc4-b677-56e7-b45d-14c23f466efe","excerpt":"JavaScript Type: Strings String in JavaScript are sequences of Unicode characters. 以下variable declaration在JS中是valid的： JS中没有dedicated  type, 如果需要表示的话，一般用string…","html":"<h1>JavaScript Type: Strings</h1>\n<p>String in JavaScript are sequences of Unicode characters. 以下variable declaration在JS中是valid的：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> 你好  <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>你好<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hello</span></code></pre></div>\n<p>JS中没有dedicated <code class=\"language-text\">char</code> type, 如果需要表示<code class=\"language-text\">char</code>的话，一般用string来代替。String有length property：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'hello'</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span></code></pre></div>\n<p><code class=\"language-text\">String</code>属于<code class=\"language-text\">Object</code>，可以对String做类似于以下的operations：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'hello'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"h\"</span>\n<span class=\"token string\">'hello, world'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mars'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"hello, mars\"</span>\n<span class=\"token string\">'hello'</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"HELLO\"</span></code></pre></div>\n<h1>JavaScript: Other Types</h1>\n<p>JS distinguishes between <code class=\"language-text\">null</code> and <code class=\"language-text\">undefined</code>. <code class=\"language-text\">null</code> specifically stands for non-value, whereas <code class=\"language-text\">undefined</code> stands for uninitialized value.  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> \na<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2, 3, 4, undefined, null];</span></code></pre></div>\n<p>JS支持Boolean Type，具体如下：</p>\n<ol>\n<li><code class=\"language-text\">false</code>, <code class=\"language-text\">0</code>, empty string <code class=\"language-text\">&quot;&quot;</code>, <code class=\"language-text\">NaN</code>, <code class=\"language-text\">null</code>以及<code class=\"language-text\">undefined</code>都会被视作false。</li>\n<li>\n<p>以上之外的value都会被视作true。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">234</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n</li>\n</ol>\n<h1>Variables</h1>\n<p>JS有三种declare variable的方式，namely <code class=\"language-text\">var</code>, <code class=\"language-text\">let</code>和<code class=\"language-text\">const</code>。\n<code class=\"language-text\">let</code>会declare block-level variable。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// myLetVariable is *not* visible out here</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> myLetVariable <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> myLetVariable <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> myLetVariable<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// myLetVariable is only visible in here</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// myLetVariable is *not* visible out here</span></code></pre></div>\n<p>同样的，<code class=\"language-text\">const</code>也会declare block-level variable，但与<code class=\"language-text\">let</code>的区别在于<code class=\"language-text\">const</code>declare的variable不可以re-assign value。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">;</span>\nfoo <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// will throw an error</span></code></pre></div>\n<p><code class=\"language-text\">var</code>在ES6 standard中已经很少被使用了，因为它会automatically declares a global variable。 Traditionally, <code class=\"language-text\">var</code> is the only way to declare a variable in JS. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// myVarVariable *is* visible out here </span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> myVarVariable <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> myVarVariable <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> myVarVariable<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token comment\">// myVarVariable is visible to the whole function </span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token comment\">// myVarVariable *is* visible out here</span></code></pre></div>\n<p>Note:</p>\n<ul>\n<li>If you declare a variable without assigning its value, it will be <code class=\"language-text\">undefined</code> initially.</li>\n<li>在ES6之前，JS是没有block-level scope的，只有function存在scope，这一点和Java等语言是有区别的。然而，ES6新增的<code class=\"language-text\">let</code>和<code class=\"language-text\">const</code>允许declare block-scoped variables。</li>\n</ul>\n<h1>Operators</h1>\n<p>JS支持基本的operators，包括<code class=\"language-text\">+</code>, <code class=\"language-text\">-</code>, <code class=\"language-text\">*</code>, <code class=\"language-text\">/</code>以及<code class=\"language-text\">%</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">x <span class=\"token operator\">+=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// equivalent to above</span>\nx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ++ and -- can be used</span></code></pre></div>\n<p><code class=\"language-text\">+</code> operator will do string concatenation:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'hello'</span> <span class=\"token operator\">+</span> <span class=\"token string\">' world!'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hello world!</span></code></pre></div>\n<p>If you add a string to a number, they will be converted into string first:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'3'</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '345'</span>\n<span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span> <span class=\"token string\">'5'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '75'</span></code></pre></div>\n<p>Comparisons in JS is a bit interesting. Double equal sign will perform type coersion if you give different types:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token number\">123</span> <span class=\"token operator\">==</span> <span class=\"token string\">'123'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// To avoid coersion, use triple-equal sign</span>\n<span class=\"token number\">123</span> <span class=\"token operator\">===</span> <span class=\"token string\">'123'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>JS also supports bit-wise operations. </p>\n<ul>\n<li><code class=\"language-text\">&amp;</code> (bitwise AND)</li>\n<li><code class=\"language-text\">|</code> (bitwise OR)</li>\n<li><code class=\"language-text\">^</code> (bitwise XOR)</li>\n<li><code class=\"language-text\">~</code> (bitwise NOT)</li>\n<li><code class=\"language-text\">&lt;&lt;</code> (left shift)</li>\n<li><code class=\"language-text\">&gt;&gt;</code> (arithmetic right shift)</li>\n<li><code class=\"language-text\">&gt;&gt;&gt;</code> (logical right shift)\nDifferent from C, logical right shift can be done by the <code class=\"language-text\">&gt;&gt;&gt;</code> operator.</li>\n</ul>","frontmatter":{"title":"JavaScript从零开始02 | Types","date":"February 15, 2019","description":"系统性理解JS Strings，Objects与Variables"}}},"pageContext":{"slug":"/javascript02/","previous":{"fields":{"slug":"/javascript01/"},"frontmatter":{"title":"JavaScript从零开始01 | Numbers"}},"next":{"fields":{"slug":"/leetcode24/"},"frontmatter":{"title":"Leetcode 24: Swap Nodes in Pairs"}}}}}