{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogs/spring01/","result":{"data":{"site":{"siteMetadata":{"title":"Chenxiao's Blog","author":"Chenxiao Guan"}},"markdownRemark":{"id":"24314276-a24c-5b39-a0fb-a326f15b8067","excerpt":"Why Spring Boot 正常使用Spring框架的情况下，即便是写一个简简单单的Hello World，我们也需要很多配置： 项目结构 web.xml文件来声明Spring的 启用Spring MVC的Spring配置 一个Controller Class来处理Hello World逻辑 Tomcat部署Web…","html":"<h1>Why Spring Boot</h1>\n<p>正常使用Spring框架的情况下，即便是写一个简简单单的Hello World，我们也需要很多配置：</p>\n<ul>\n<li>项目结构</li>\n<li>web.xml文件来声明Spring的<code class=\"language-text\">DispatcherServlet</code></li>\n<li>启用Spring MVC的Spring配置</li>\n<li>一个Controller Class来处理Hello World逻辑</li>\n<li>Tomcat部署Web服务器</li>\n</ul>\n<p>简简单单的写一个hello world却需要如此之多的先前配置。Spring Boot的诞生完全简化了这些步骤。</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloController</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string gstring\">\"Hello World\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用Spring Boot CLI：</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">spring run HelloController.groovy</code></pre></div>\n<h2>SpringBootApplication</h2>\n<p>使用Spring Initializr，我们可以在很短的时间内创建一个Spring Boot Application。在项目根目录下的/src/main/java的主程序引导类之前，我们需要加入<code class=\"language-text\">@SpringBootApplication</code>从而使用Spring Boot的众多功能。单单的这一行代码其实开启了Spring Boot的三个功能：</p>\n<ol>\n<li>Spring的<code class=\"language-text\">@Configuration</code>。标明该类使用基于Java的配置。</li>\n<li>Spring的<code class=\"language-text\">@ComponentScan</code>。启用组件扫描，这样只要我们的class之前标明了<code class=\"language-text\">@Controller</code>，Spring Boot就能自动帮我们找到他的位置。</li>\n<li>Spring的<code class=\"language-text\">@EnableAutoConfiguration</code>。顾名思义，开启自动配置。</li>\n</ol>\n<h2>User Authentication</h2>\n<p>使用Spring Boot使用户验证也变得很容易。在我们的Maven配置中加入：</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-security<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2>多Profile YAML文件进行配置</h2>\n<p>如果我们想有多个Configuration对spring boot进行配置怎么办？可以在application.yml中设置多个profile来迎合多个开发环境需求。</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">logging</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">level</span><span class=\"token punctuation\">:</span> \n        <span class=\"token key atrule\">root</span><span class=\"token punctuation\">:</span> INFO\n\n<span class=\"token punctuation\">---</span>\n\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span> development\n\n<span class=\"token key atrule\">logging</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">level</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">root</span><span class=\"token punctuation\">:</span> DEBUG\n\n<span class=\"token punctuation\">---</span>\n\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span> production\n\n<span class=\"token key atrule\">logging</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /tmp/\n    <span class=\"token key atrule\">file</span><span class=\"token punctuation\">:</span> BookWorm.log\n    <span class=\"token key atrule\">level</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">root</span><span class=\"token punctuation\">:</span> WARN</code></pre></div>\n<h3>错误页配置</h3>\n<p>我们可以将一个error.html的thymeleaf模板放入<code class=\"language-text\">src/main/resources/templates</code>中。所有的静态文件应该放入<code class=\"language-text\">src/main/resources/static</code>中，比如图片等。</p>\n<h2>自动配置微调优先顺序</h2>\n<ol>\n<li>命令行参数</li>\n<li><code class=\"language-text\">java:comp/env</code>里的JNDI属性</li>\n<li>JVM系统属性</li>\n<li>操作系统环境变量</li>\n<li>随机生成的带<code class=\"language-text\">random.*</code>前缀的属性（在设置其他属性时，可以引用他们，比如<code class=\"language-text\">$(random.long)</code>）</li>\n<li>应用程序以外的application.properties或者application.yml文件</li>\n<li>打包在应用程序内的application.properties或者application.yml文件</li>\n<li>通过@PropertiySource标注的属性源</li>\n<li>默认属性</li>\n</ol>","frontmatter":{"title":"Spring Boot实战读书笔记01","date":"June 04, 2019","description":"Spring Boot实战的读书笔记。"}}},"pageContext":{"slug":"/spring01/","previous":{"fields":{"slug":"/review01/"},"frontmatter":{"title":"复习专用"}},"next":{"fields":{"slug":"/java10/"},"frontmatter":{"title":"Java类的生命周期"}}}}}