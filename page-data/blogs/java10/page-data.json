{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogs/java10/","result":{"data":{"site":{"siteMetadata":{"title":"Chenxiao's Blog","author":"Chenxiao Guan"}},"markdownRemark":{"id":"88b78420-7c62-56fd-b944-26ac680aae4d","excerpt":"Java虚拟机及程序的生命周期 在以下情况，Java虚拟机将结束生命周期： 程序正常执行结束。 程序在执行中因为出现异常或者错误而异常终止。 执行了方法。 由于操作系统出现错误而导致Java虚拟机进程终止。 类的加载，连接和初始化 使用类之前JVM会进行以下操作： 加载(loading…","html":"<h2>Java虚拟机及程序的生命周期</h2>\n<p>在以下情况，Java虚拟机将结束生命周期：</p>\n<ol>\n<li>程序正常执行结束。</li>\n<li>程序在执行中因为出现异常或者错误而异常终止。</li>\n<li>执行了<code class=\"language-text\">System.exit()</code>方法。</li>\n<li>由于操作系统出现错误而导致Java虚拟机进程终止。</li>\n</ol>\n<h2>类的加载，连接和初始化</h2>\n<p>使用类之前JVM会进行以下操作：</p>\n<ol>\n<li>加载(loading)：查找并加载类的二进制数据。</li>\n<li>\n<p>连接(linking)：包括验证，准备和解析类的二级制数据。</p>\n<ol>\n<li>验证(verify)：确保被加载类的正确性。</li>\n<li>准备(prepare)：为类的静态变量分配内存，并将其初始化为默认值。</li>\n<li>解析(resolve)：吧类中的符号引用转换为直接引用。</li>\n</ol>\n</li>\n<li>初始化(initialize)：给类的静态变量赋予正确的初始值。</li>\n</ol>\n<p>需要注意的是，当我们在使用继承时，java会确保我们在使用child class之前，parent class已经完成加载。\n假设我们有一个<code class=\"language-text\">InitTester</code> class:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// InitTester.java</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"init Base\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Sub</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"init Sub\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InitTester</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Base</span> base<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Sytstem</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After defining base\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        base <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After creating an object of Base\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a=\"</span><span class=\"token operator\">+</span>base<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b=\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Sub</span><span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最终运行的结果是什么呢？</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">init InitTester\nAfter defining base\ninit Base\nAfter creating an object of Base\n<span class=\"token assign-left variable\">a</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\ninit Sub\n<span class=\"token assign-left variable\">b</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></code></pre></div>\n<p>还有一点需要注意的是，通常情况下，当用户访问一个类的static变量时，类就会被jvm初始化。但是当用户访问final变量时，如果再编译时可被计算，那当前类并不会被初始化。举个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tester</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">class</span> test <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test Initialized\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>出现的结果是：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">6</span></code></pre></div>\n<h3>加载器的父子关系</h3>\n<p>根类加载器&#x3C;-扩展类加载器&#x3C;-系统类加载器&#x3C;-用户自定义加载器</p>\n<h3>父亲委托机制的优点</h3>\n<p>父亲委托机制(Parent Delegation)提高了软件系统的安全性。在此机制下，用户定义的加载器不会加载到应该有父亲加载的可靠类。例如，<code class=\"language-text\">java.lang.object</code>类总是由根加载器加载，从而消除了恶意代码攻击此类的可能性。</p>\n<h2>对象的生命周期</h2>\n<h3>创建对象方式</h3>\n<ol>\n<li>new语句创建</li>\n<li>反射手段，<code class=\"language-text\">java.lang.reflect.Constructor</code></li>\n<li>调用对象的clone方法</li>\n<li>运用反序列化手段</li>\n</ol>\n<h3>构造方法 （Constructor）</h3>\n<ol>\n<li>自定义Costructor后就没有default constructor了。</li>\n<li>可定义多个constructor （overloading）</li>\n<li>子类调用父类构造方法使用<code class=\"language-text\">super</code> keyword。</li>\n<li>JVM会首先执行父类构造方法，再执行子类构造方法。</li>\n</ol>\n<h3>构造方法的作用域</h3>\n<p>构造方法只能通过以下方式被调用：</p>\n<ol>\n<li>当前类的其他构造方法通过<code class=\"language-text\">this</code>语句调用它。</li>\n<li>当前类的子类的构造方法通过<code class=\"language-text\">super</code>语句调用它。</li>\n<li>在程序中通过<code class=\"language-text\">new</code>语句调用它。</li>\n</ol>\n<h4>如何禁止用户instantiate一个类的新对象？</h4>\n<p>将唯一的默认构造函数改写成private的空方法。</p>\n<h3>单例类</h3>\n<h4>静态工厂</h4>\n<blockquote>\n<p>如果创建某个类对象的cost很高，我们可以改为使用静态工厂，重复使用一个对象。</p>\n</blockquote>\n<p>静态工厂方法最主要的特点是：每次被调用的时候，不一定要创建一个新的对象。</p>\n<h3>不可变类的优点</h3>\n<ol>\n<li>更加安全，不容易出错</li>\n<li>线程安全：当多个线程访问不可变类的同一个实例时，无需进行现成的同步。</li>\n</ol>\n<h4>重复在两个地方使用同一个object，但是想让他们behave differently时，可以创建一个保护性复制。</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Schedule</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Date</span> start<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Date</span> end<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Schedule</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span> start<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Date</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>start <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>end <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Date</span> <span class=\"token function\">getStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span>start<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Date</span> <span class=\"token function\">getEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span>end<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>垃圾回收（garbage collection）</h2>\n<h4>如何手动垃圾回收</h4>\n<p>使用<code class=\"language-text\">System.gc()</code>或者<code class=\"language-text\">Runtime.gc()</code>可以催促jvm更快的进行垃圾回收。但是这也不能保证调用完该方法后，垃圾回收线程就能立即执行回收操作。</p>\n<h4><code class=\"language-text\">finalize()方法</code></h4>\n<p>对象的<code class=\"language-text\">finalize</code>方法会在被回收前的最后一刻执行。需要注意的是，<code class=\"language-text\">finalize</code>方法可以让当前对象复活。</p>\n<p>当垃圾回收器执行<code class=\"language-text\">finalize()</code>方法时，如果出现异常，垃圾回收器不会报告异常，也不会导致程序的中断。</p>\n<h3>对象的强，软，弱和虚应用</h3>\n<blockquote>\n<p>分别对应Strong,soft,weak和phantom reference。</p>\n</blockquote>\n<p>执行<code class=\"language-text\">System.gc()</code>之后，垃圾回收器只会回收那些仅仅持有弱引用的对象。</p>","frontmatter":{"title":"Java类的生命周期","date":"June 06, 2019","description":"Java面向对象编程第二版的读书笔记。"}}},"pageContext":{"slug":"/java10/","previous":{"fields":{"slug":"/spring01/"},"frontmatter":{"title":"Spring Boot实战读书笔记01"}},"next":{"fields":{"slug":"/spring02/"},"frontmatter":{"title":"Spring Boot实战读书笔记02"}}}}}