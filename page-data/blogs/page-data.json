{"componentChunkName":"component---src-pages-blogs-index-js","path":"/blogs/","result":{"data":{"site":{"siteMetadata":{"title":"Chenxiao's Blog"}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"…","fields":{"slug":"/js-currying/"},"frontmatter":{"date":"August 29, 2020","title":"如何在JS中柯里化(curry)一个函数","description":"JS的语言基础之一，涉及到闭包，函数编程等知识。"}}},{"node":{"excerpt":"防抖(Debounce) 防抖的定义是延时执行。比如我定义 500ms 的防抖，如果用户在第一个 500ms 内进行了多次操作，那么多余的操作会重制计时器为 0。 节流(Throttle) 节流的定义就是，如果在特定时间范围内收到了多次请求，那么我执行一次。 给窗口滚动的性能优化","fields":{"slug":"/debounce-throttle/"},"frontmatter":{"date":"August 28, 2020","title":"JS中防抖(debounce)与节流(throttle)的实现方式","description":"how to effectively implement debounce and throttle functions in JavaScript"}}},{"node":{"excerpt":"Chapter 10 Functions 所有的类型都有一个属性返回函数的名字。如果函数是 bind 返回的或者是 getter 或者 setter，则之前会有一个 prefix： Chapter 11 Promise Promise 的三种状态 Promise…","fields":{"slug":"/PJSWD05/"},"frontmatter":{"date":"August 23, 2020","title":"JS红宝书学习笔记5","description":"红宝书从头到尾通读第一遍学习笔记"}}},{"node":{"excerpt":"Chapter 8 对象数据的属性 对象的每一个数据都有自己的属性： , 指数据能否被删除或者更改属性，默认为 true。 , 指数据会不会在循环中出现，默认为 true。 , 指数据能否被重写，默认为 true。 , 数据的值，默认为 undefined…","fields":{"slug":"/PJSWD04/"},"frontmatter":{"date":"August 20, 2020","title":"JS红宝书学习笔记4","description":"红宝书从头到尾通读第一遍学习笔记"}}},{"node":{"excerpt":"Chapter 6 Array  and  区别在于的第一个 argument 是一个 iterable 或者一个 array-like，return 结果是这个 iterable 的 shallow copy。可以 take 无限多个 arguments…","fields":{"slug":"/PJSWD03/"},"frontmatter":{"date":"August 17, 2020","title":"JS红宝书学习笔记3","description":"红宝书从头到尾通读第一遍学习笔记"}}},{"node":{"excerpt":"Chapter 4 变量的数据类型 正常情况下，primitive type应该用来决定数据类型。但是引用类型就不建议使用typeof了，而应该用。 所有的引用类型都是instanceof Object。相对的，primitive types的instanceof Object…","fields":{"slug":"/PJSWD02/"},"frontmatter":{"date":"August 16, 2020","title":"JS红宝书学习笔记2","description":"红宝书从头到尾通读第一遍学习笔记第二篇"}}},{"node":{"excerpt":"Chapter 2  tag应该放在body的最底下防止加载阻塞。HTML4提供了标签来表示script不会改变页面结构，因此script可以在页面加载完成后再执行。 download should begin immediately but execution should…","fields":{"slug":"/PJSWD01/"},"frontmatter":{"date":"August 15, 2020","title":"JS红宝书学习笔记1","description":"红宝书从头到尾通读第一遍学习笔记"}}},{"node":{"excerpt":"001. 能不能说一说 TCP 和 UDP 的区别？ 首先概括一下基本的区别: TCP是一个面向连接的、可靠的、基于字节流的传输层协议。 而UDP是一个面向无连接的传输层协议。(就这么简单，其它TCP的特性也就没有了)。 具体来分析，和 UDP 相比，TCP…","fields":{"slug":"/tcp-review/"},"frontmatter":{"date":"July 06, 2020","title":"TCP协议面试前复习","description":"转自神三元博客：http://47.98.159.95/my_blog/tcp/001.html 本文对原版有改动"}}},{"node":{"excerpt":"Etcd Etcd is a key-value store that runs on the master node, which stores cluster information in a key-value fashion. Basic Etcd operations…","fields":{"slug":"/k8s1/"},"frontmatter":{"date":"June 30, 2020","title":"Preparation for the CKA Exam 01","description":"Notes for the preparation of the CKA exam"}}},{"node":{"excerpt":"This will be constantly updated, as I find other things worth memorizing.  Lastly Updated: 2020-06-22 23:40:16","fields":{"slug":"/memo-js/"},"frontmatter":{"date":"June 13, 2020","title":"My Memo For the Algorithmic Interviews","description":"This is a javascript code snippet for me to memorize everyday so that I don't fail on these on an algorithmic interview."}}},{"node":{"excerpt":"","fields":{"slug":"/express-typescript-azure/"},"frontmatter":{"date":"January 27, 2020","title":"A Quick Setup for Express (Node.js), TypeScript, Travis CI, and Azure","description":null}}},{"node":{"excerpt":"做了很多道题都用到了quick select的概念。例如215:Kth Largest Element in an Array。\n快排和快选都用到了的概念，即iteratively将array根据其中的一个pivot分割成两部分，使得前半部分小于pivot而后半部分大于pivot…","fields":{"slug":"/quicksort/"},"frontmatter":{"date":"December 06, 2019","title":"Implementation of quick sort and partial sort in C++","description":"快排和快选的C++实现"}}},{"node":{"excerpt":"Problem Statement Say you have an array for which the ith element is the price of a given stock on day i. Design an algorithm to find the…","fields":{"slug":"/leetcode123/"},"frontmatter":{"date":"October 09, 2019","title":"Best Time to Buy and Sell Stock III","description":"hard leetcode problem"}}},{"node":{"excerpt":"题目描述 Given a singly linked list L: L0→L1→…→Ln-1→Ln,\nreorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→… You may not modify the values in the list’s nodes…","fields":{"slug":"/leetcode143/"},"frontmatter":{"date":"September 19, 2019","title":"LeetCode 143: Reorder List","description":"Linked List question, reverse linked list, stack, pointers"}}},{"node":{"excerpt":"This is my resume:\nChenxiao Resume","fields":{"slug":"/resume/"},"frontmatter":{"date":"September 02, 2019","title":"Chenxiao Guan Resume - Software Engineer","description":"My software engineering resume"}}},{"node":{"excerpt":"105的题目为：reconstruct the binary tree from Preorder and Inorder traversal of the tree. 106题目为：reconstruct the binary tree from Postorder and…","fields":{"slug":"/leetcode106/"},"frontmatter":{"date":"August 20, 2019","title":"leetcode 105 & 106: Construct Binary Tree from Preorder, Postorder and Inorder Traversal","description":"两道类似的medium题目。binary tree, bfs, dfs, tree traversal"}}},{"node":{"excerpt":"怠惰了一整个暑假。。这几天要赶秋招了，赶紧开始紧密的刷题，不能再落下了。一个暑假过去感觉自己之前刷的题全部忘光了，所以先从相对简单的题目做起。 题目描述如下：\n 这道题目乍一看相当简单，仿佛只需要确认left和right child都是validBST，再确认左右child…","fields":{"slug":"/leetcode98/"},"frontmatter":{"date":"August 17, 2019","title":"Leetcode 98: Validate Binary Search Tree","description":"dfs, in-order traversal, bst"}}},{"node":{"excerpt":"5 Longest Palindromic Substring Key takeaway  takes two arguments, the first one being the beginning index\nof the substring, and the second…","fields":{"slug":"/leetcodecpp/"},"frontmatter":{"date":"August 17, 2019","title":"Leetcode C++ solutions","description":"This is just a blog post that I keep records of my C++ leetcode solutions"}}},{"node":{"excerpt":"自定义安全配置 在maven中加入spring security的起步依赖后，我们可以通过配置来覆盖掉一些默认属性。 通过属性文件外置配置 使用命令行参数： 使用来配置: 使用来配置: 使用环境变量 配置数据源 In your : Bean…","fields":{"slug":"/spring02/"},"frontmatter":{"date":"June 20, 2019","title":"Spring Boot实战读书笔记02","description":"学习Spring Boot的读书笔记。以Spring Boot实战这本书的后几章为主。"}}},{"node":{"excerpt":"Java虚拟机及程序的生命周期 在以下情况，Java虚拟机将结束生命周期： 程序正常执行结束。 程序在执行中因为出现异常或者错误而异常终止。 执行了方法。 由于操作系统出现错误而导致Java虚拟机进程终止。 类的加载，连接和初始化 使用类之前JVM…","fields":{"slug":"/java10/"},"frontmatter":{"date":"June 06, 2019","title":"Java类的生命周期","description":"Java面向对象编程第二版的读书笔记。"}}},{"node":{"excerpt":"Why Spring Boot 正常使用Spring框架的情况下，即便是写一个简简单单的Hello World，我们也需要很多配置： 项目结构 web.xml文件来声明Spring的 启用Spring MVC的Spring配置 一个Controller Class来处理Hello…","fields":{"slug":"/spring01/"},"frontmatter":{"date":"June 04, 2019","title":"Spring Boot实战读书笔记01","description":"Spring Boot实战的读书笔记。"}}},{"node":{"excerpt":"这是一篇我用来自己复习用的post。总结了一些面试之前需要复习的点，旨在帮助自己在面试之前能refresh一些概念以及算法。 常用c++ api   Binary Search 左闭右开的二分搜索算法，[a,b)。两道相关题目在这里。 dfs and bfs dfs注意base…","fields":{"slug":"/review01/"},"frontmatter":{"date":"May 31, 2019","title":"复习专用","description":"面试之前复习专用post。"}}},{"node":{"excerpt":"This is a walkthrough of how to implement the  in C++. Since I met this problem\nin a C++ intern interview, I want to write a blog post of…","fields":{"slug":"/cppvector/"},"frontmatter":{"date":"May 22, 2019","title":"How to implement std::vector in C++","description":"A walkthrough of reimplementing the std::vector in C++"}}},{"node":{"excerpt":"It is pretty common to be asked “what does the  keyword in C++ do?” during an interview, if you are interviewing a C++ position. This blog…","fields":{"slug":"/c++virtual/"},"frontmatter":{"date":"May 09, 2019","title":"Virtual Functions in C++","description":"A simple example to demonstrate how `virtual` keyword in C++ works, and why and when you should use it. "}}},{"node":{"excerpt":"我一看这题目标题就知道是一道dp（捂脸）。。。所有的dp问题都可以先想出一个recursion解法，然后再化成iterative的dp就可以了。 如果是单纯的recursion的话， 我们从index 0开始，对从目前这个点开始的可以达到的任何一个index…","fields":{"slug":"/leetcode55/"},"frontmatter":{"date":"May 04, 2019","title":"LeetCode 55: Jump Game","description":"一道简单的dp。"}}},{"node":{"excerpt":"有好几天没有更新了，因为这两天考完Econ放松了一下再加上身体有点不舒服就没怎么做题。我们先来看一下题目描述：  和之前做过的一道Next Permutation有一点相似（回想起被支配的恐惧）。我这里的第一反应是以为这道题很简单。。采用dfs…","fields":{"slug":"/leetcode46/"},"frontmatter":{"date":"May 03, 2019","title":"LeetCode 46: Permutations","description":"有好几天没有更新了，再来做一道dfs的题目。"}}},{"node":{"excerpt":"153算是一个33的弱化版。我们先来看一下15…","fields":{"slug":"/leetcode33/"},"frontmatter":{"date":"April 27, 2019","title":"LeetCode 33 & 153: Search in Rotated Sorted Array / Find Minimum in Rotated Sorted Array","description":"两道相辅相成的medium难度LeetCode题目。"}}},{"node":{"excerpt":"我们先来看一下题目描述：  学过计算机系统的同学应该都对LRU Cache不陌生，其实他就是一种数据结构来用有限的空间存储最近被使用的key value pairs，并达到constant time的get和put。 假设我们LRU Cache的capacity为…","fields":{"slug":"/leetcode146/"},"frontmatter":{"date":"April 24, 2019","title":"LeetCode 146: LRU Cache","description":"经典面试题目LRU Cache，前一阵子面试挂了这道题，现在重新用C++做一遍感受一下。"}}},{"node":{"excerpt":"看题目描述之前先来观赏一下我的提交记录。。。。。。  最后实在是处理不懂edge cases了所以看了答案。真的是崩溃。疯狂下拉这个号的正确率。。。 我们来看一下题目描述：  在C++中有一个builtin就叫next_permutation…","fields":{"slug":"/leetcode31/"},"frontmatter":{"date":"April 22, 2019","title":"LeetCode 31: Next Permutation","description":"一道做到吐血的简单题。"}}},{"node":{"excerpt":"被一个course project…","fields":{"slug":"/leetcode25/"},"frontmatter":{"date":"April 22, 2019","title":"LeetCode 25: Reverse Nodes in k-Group","description":"一道看似简单实际暗藏玄机的Hard leetcode题目。"}}},{"node":{"excerpt":"国际惯例，让我们先来看一下题目：  乍一看这道题，相信稍微对数据结构和算法有了解的同学就能看出这道题目的这个算法很像merge sort的实现方法。\n如果我们给定两个sorted list，那么我们只需要两个pointers指向每一个list的头，然后依次将小的那一个node…","fields":{"slug":"/leetcode23/"},"frontmatter":{"date":"April 19, 2019","title":"LeetCode 23: Merge k Sorted Lists","description":"一道hard的leetcode题目。虽然没有想象中的难，但是是一道特别适合整理思路的题目。"}}},{"node":{"excerpt":"这两天面了一波腾讯游戏部门的实习，被C++搞的死去活来，索性从头到尾学一波C++。这个语言我之前一直 觉得就只是一个升级版的C而已，面完这次试才发现好像完全不仅仅如此。这个系列从最基础的C++开始记起，希望自己能学到一些东西。 Hello World! 所以C++的hello…","fields":{"slug":"/cppbasic1/"},"frontmatter":{"date":"April 18, 2019","title":"C++基础篇01：Hello World!","description":"被国内面试搞得我不知所措，无奈从头开始学C++。"}}},{"node":{"excerpt":"Letter Combinations of a Phone Number 这是我最近做的两道很经典的DFS题目。我们先来看一下第17题的题目描述：  不难看出这是一道搜索题目，我们也可以用DFS以及BFS两种解法来对此题求解。我们先来看一下DFS的解法： 主要关注一下dfs…","fields":{"slug":"/leetcode22/"},"frontmatter":{"date":"April 17, 2019","title":"LeetCode 17 & 22: 两道Medium DFS題目","description":"Letter Combinations of a Phone Number & Generate Parentheses. 两道经典DFS题目"}}},{"node":{"excerpt":"这是一道被Leetcode标为Medium的题目，让我们先来看一下题目描述：  这道题的点赞之多也是把我吓到了。。 其实看到这个名字就不难想到，这题应该就只是一个2Sum的升级版而已，所以我们的思路\n也可用从解决2Sum开始，然后看看怎么再进一步解决3Sum。\n大家都知道2Sum…","fields":{"slug":"/leetcode15/"},"frontmatter":{"date":"April 14, 2019","title":"LeetCode 15: 3Sum","description":"LeetCode经典题目2Sum的升级版3Sum"}}},{"node":{"excerpt":"Integer to Roman 国际惯例，我们先来看一下题目描述：  不难看出这题的思路完全是简单的一批，甚至说是不用什么思路就能做出来。。唯一需要多考虑一点的\ncorner case就是4和9这种需要加前缀的罗马数字需要区分考虑就可以了。\n我们来看一下这题在c…","fields":{"slug":"/leetcode12/"},"frontmatter":{"date":"April 13, 2019","title":"LeetCode 12 / 13: Integer to Roman & Roman to Integer","description":"两道简单的leetcode题目。挂了面试来做道简单题压压惊。"}}},{"node":{"excerpt":"与之前做的上一题一样，此题也是一道难度为medium的题，个人认为比上一题要稍微难一些。\n我们还是先来一起看一下题目描述：  Solution 1: Brute Force Solution…","fields":{"slug":"/leetcode05/"},"frontmatter":{"date":"April 11, 2019","title":"Leetcode 5: Longest Palindromic Substring","description":"Go语言对于Leetcode第5题的两个解法"}}},{"node":{"excerpt":"这是一道leetcode中等难度的题目。题目描述如下：  这题虽然标的是medium，其实思路非常的简单，不过实现起来稍微有一点tricky。\n对每两个节点进行pair-wise交换，只需要建立一个temp pointer\n指向第三个node，交换前两个，再从第三个node…","fields":{"slug":"/leetcode24/"},"frontmatter":{"date":"April 10, 2019","title":"Leetcode 24: Swap Nodes in Pairs","description":"Go语言对于Leetcode第24题的两个解法"}}},{"node":{"excerpt":"JavaScript Type: Strings String in JavaScript are sequences of Unicode characters. 以下variable declaration在JS中是valid的： JS中没有dedicated  type…","fields":{"slug":"/javascript02/"},"frontmatter":{"date":"February 15, 2019","title":"JavaScript从零开始02 | Types","description":"系统性理解JS Strings，Objects与Variables"}}},{"node":{"excerpt":"JavaScript Building Blocks: Types       (new in ES2015，也就是ES6)\n除了以上基础Types之外，JavaScript同时支持使用和, 以及，\n和。因此，一种更正确的Types…","fields":{"slug":"/javascript01/"},"frontmatter":{"date":"February 10, 2019","title":"JavaScript从零开始01 | Numbers","description":"此篇笔记为从零开始学习JavaScript的第一篇,作为我系统性学习JavaScript的开始。此系列将会以英文为主。主要学习资料为Mozilla的Documentation。"}}}]}},"pageContext":{}}}