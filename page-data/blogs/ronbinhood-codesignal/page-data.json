{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogs/ronbinhood-codesignal/","result":{"data":{"site":{"siteMetadata":{"title":"Chenxiao's Blog","author":"Chenxiao Guan"}},"markdownRemark":{"id":"7e95b553-e104-5d70-addf-5ae14f209e19","excerpt":"以下为 Web Engineer\b Coding 轮在 CodeSignal 平台上的面经： 给一些 feature 的字符串，要求是根据给定的 numberOfRows 返回一个字符串数组，用分隔符分开且不能超过最长 width limit。需要注意的是，如果某一个 feature…","html":"<p>以下为 Web Engineer\b Coding 轮在 CodeSignal 平台上的面经：</p>\n<p>给一些 feature 的字符串，要求是根据给定的 numberOfRows 返回一个字符串数组，用分隔符分开且不能超过最长 width limit。需要注意的是，如果某一个 feature 在一行放不下，应该把它放在下一行里，规则是尽量 maintain 给定数组的顺序。解决完前两个 test case 以后需要解决剩下的 5 个，要求是如果某一个字符串所有的行数都放不下，那就将其放进当前最短的行里。最后 followup：输入数据量太大怎么办</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">featuredCollections:\n[&quot;E-Commerce&quot;,\n &quot;100 Most Popular&quot;,\n &quot;Retail&quot;,\n &quot;Consumer Products&quot;,\n &quot;Internet&quot;,\n &quot;Entertainment&quot;,\n &quot;Media&quot;,\n &quot;Apparel&quot;]\nscreenWidthCharacters: 30\nnumberOfRows: 4\nseparator: &quot; / &quot;\nExpected Output:\n[&quot;E-Commerce / 100 Most Popular&quot;,\n &quot;Retail / Consumer Products&quot;,\n &quot;Internet / Entertainment&quot;,\n &quot;Media / Apparel&quot;]\n\n\nfeaturedCollections:\n[&quot;E-Commerce&quot;,\n &quot;100 Most Popular Stocks&quot;,\n &quot;Retail&quot;,\n &quot;Consumer Products&quot;,\n &quot;Internet&quot;,\n &quot;Entertainment&quot;,\n &quot;Media&quot;,\n &quot;Apparel&quot;]\nscreenWidthCharacters: 30\nnumberOfRows: 4\nseparator: &quot; / &quot;\nExpected Output:\n[&quot;E-Commerce / Retail / Internet&quot;,\n &quot;100 Most Popular Stocks&quot;,\n &quot;Consumer Products / Media&quot;,\n &quot;Entertainment / Apparel&quot;]</code></pre></div>\n<p>以下为 JavaScript 的实现，仅供参考：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">rhCollectionPillLayout</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">featuredCollections<span class=\"token punctuation\">,</span>\n  screenWidthCharacters<span class=\"token punctuation\">,</span>\n  numberOfRows<span class=\"token punctuation\">,</span>\n  separator</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token const\">result</span> <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> length<span class=\"token operator\">:</span> numberOfRows <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token const\">feature</span> <span class=\"token keyword\">of</span> featuredCollections<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token let\">used</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token let\">i</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numberOfRows<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">&amp;&amp;</span> screenWidthCharacters <span class=\"token operator\">>=</span> feature<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> feature<span class=\"token punctuation\">;</span>\n        used <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n        screenWidthCharacters <span class=\"token operator\">-</span>\n          feature<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span>\n          separator<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span>\n          result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span>\n        <span class=\"token number\">0</span>\n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> separator <span class=\"token operator\">+</span> feature<span class=\"token punctuation\">;</span>\n        used <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>used<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> <span class=\"token let\">idx</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> <span class=\"token let\">shortest</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token let\">j</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> numberOfRows<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shortest <span class=\"token operator\">></span> result<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          shortest <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n          idx <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> feature<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        result<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> separator <span class=\"token operator\">+</span> feature<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Robinhood Web Engineer (New Grad) Coding Interview","date":"September 21, 2020","description":"Robinhood Onsite面经"}}},"pageContext":{"slug":"/ronbinhood-codesignal/","previous":{"fields":{"slug":"/js-promise-implementation/"},"frontmatter":{"title":"原生JS实现Promise封装"}},"next":null}}}