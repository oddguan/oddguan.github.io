{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogs/PJSWD02/","result":{"data":{"site":{"siteMetadata":{"title":"Chenxiao's Blog","author":"Chenxiao Guan"}},"markdownRemark":{"id":"704ae73e-6b28-5083-8d01-6ca7b0b3c91d","excerpt":"Chapter 4 变量的数据类型 正常情况下，primitive type应该用来决定数据类型。但是引用类型就不建议使用typeof了，而应该用。 所有的引用类型都是instanceof Object。相对的，primitive types的instanceof Object永远return false…","html":"<h1 id=\"chapter-4\" style=\"position:relative;\"><a href=\"#chapter-4\" aria-label=\"chapter 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Chapter 4</h1>\n<h2 id=\"变量的数据类型\" style=\"position:relative;\"><a href=\"#%E5%8F%98%E9%87%8F%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\" aria-label=\"变量的数据类型 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>变量的数据类型</h2>\n<p>正常情况下，primitive type应该用<code class=\"language-text\">typeof</code>来决定数据类型。但是引用类型就不建议使用typeof了，而应该用<code class=\"language-text\">instanceof</code>。</p>\n<blockquote>\n<p>所有的引用类型<code class=\"language-text\">reference types</code>都是instanceof Object。相对的，primitive types的instanceof Object永远return false。</p>\n</blockquote>\n<h2 id=\"javascript-garbage-collection\" style=\"position:relative;\"><a href=\"#javascript-garbage-collection\" aria-label=\"javascript garbage collection permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript Garbage Collection</h2>\n<p>JS在浏览器中主要是用mark and sweep算法进行垃圾回收，但是因为历史原因有些浏览器引擎依然会在底层使用reference counting。考虑如下情况：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> element <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"some element\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token let\">myObject</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyObject<span class=\"token punctuation\">.</span>element <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\nelement<span class=\"token punctuation\">.</span>someObject <span class=\"token operator\">=</span> myObject<span class=\"token punctuation\">;</span></code></pre></div>\n<p>如上代码会产生引用循环，也就是说<code class=\"language-text\">element</code>和<code class=\"language-text\">myObject</code>都会一直保存两个引用。在IE9之前，应该使用如下代码保证不会有任何的内存泄露。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">myObject<span class=\"token punctuation\">.</span>element <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\nelement<span class=\"token punctuation\">.</span>someObject <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"注意事项以及最佳实践\" style=\"position:relative;\"><a href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E4%BB%A5%E5%8F%8A%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5\" aria-label=\"注意事项以及最佳实践 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>注意事项以及最佳实践</h3>\n<p>在使用全局变量时，如果确认一个变量将不再被使用的话，应该将它的值设置为<code class=\"language-text\">null</code>。这个步骤称之为”dereferencing”。在函数内部的局部变量不太需要太在意这一点，因为函数执行结束后，内部的所有变量将会dereference。</p>\n<h3 id=\"v8引擎的隐藏类优化机制\" style=\"position:relative;\"><a href=\"#v8%E5%BC%95%E6%93%8E%E7%9A%84%E9%9A%90%E8%97%8F%E7%B1%BB%E4%BC%98%E5%8C%96%E6%9C%BA%E5%88%B6\" aria-label=\"v8引擎的隐藏类优化机制 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>V8引擎的隐藏类优化机制</h3>\n<p>V8引擎底层的优化机制之一就是隐藏类。这里有一篇很好的文章来解释这种优化机制：<a href=\"https://juejin.im/post/6844903758908899341\">https://juejin.im/post/6844903758908899341</a></p>\n<p>重要需要记住的点是，尽量避免动态添加或删除对象的属性值。举个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token const\">p1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jake'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token const\">p2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Paul'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 以上p1和p2使用同一个hidden class</span>\np1<span class=\"token punctuation\">.</span>sex <span class=\"token operator\">=</span> <span class=\"token string\">'male'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建新的隐藏类，对performance造成影响</span>\n<span class=\"token keyword\">delete</span> p1<span class=\"token punctuation\">.</span>sex<span class=\"token punctuation\">;</span> <span class=\"token comment\">// delete同样会创建新的隐藏类</span>\n\n<span class=\"token comment\">// 如果想删除一个属性，应该将其值设置为null而非delete</span>\np1<span class=\"token punctuation\">.</span>sex <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>避免动态删除属性的方法是将不再使用的属性值设置为null。避免动态添加属性的方法是将需要添加的属性放在构造函数里。</p>\n<h2 id=\"chapter-4-summary摘抄\" style=\"position:relative;\"><a href=\"#chapter-4-summary%E6%91%98%E6%8A%84\" aria-label=\"chapter 4 summary摘抄 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Chapter 4 Summary摘抄</h2>\n<p>Two types of values can be stored in JavaScript variables: primitive values and reference values. Primitive values have one of the six primitive data types: Undefined, Null, Boolean, Number, String, and Symbol. Primitive and reference values have the following characteristics:</p>\n<ul>\n<li>Primitive values are of a fixed size and so are stored in memory on the stack.</li>\n<li>Copying primitive values from one variable to another creates a second copy of the value.</li>\n<li>Reference values are objects and are stored in memory on the heap.</li>\n<li>A variable containing a reference value actually contains just a pointer to the object, not the object itself.</li>\n<li>Copying a reference value to another variable copies just the pointer, so both variables end up referencing the same object.</li>\n<li>The <code class=\"language-text\">typeof</code> operator determines a value’s primitive type, whereas the <code class=\"language-text\">instanceof</code> operator is used to determine the reference type of a value.</li>\n</ul>\n<p>All variables, primitive and reference, exist within an execution context (also called a scope) that determines the lifetime of the variable and which parts of the code can access it. Execution context can be summarized as follows:</p>\n<ul>\n<li>Execution contexts exist globally (called the global context), within functions, and within blocks.</li>\n<li>Each time a new execution context is entered, it creates a scope chain to search for variables and functions.</li>\n<li>Contexts that are local to a function or block have access not only to variables in that scope but also to variables in any containing contexts and the global context.</li>\n<li>The global context has access only to variables and functions in the global context and cannot directly access any data inside local contexts.</li>\n<li>The execution context of variables helps to determine when memory will be freed.</li>\n</ul>\n<p>JavaScript is a garbage-collected programming environment where the developer need not be concerned with memory allocation or reclamatio. JavaScript’s gabage-collection routine can be summarized as follows:</p>\n<ul>\n<li>Values that go out of scope will automatically be marked for reclamation and will be deleted during the garbage-collection process.</li>\n<li>The predominant garbage collection algorithm is called mark-and-sweep, which marks values that aren’t currently being used and then goes back to reclaim that memory.</li>\n<li>Another algorithm is reference counting, which keeps track of how many references there are to a particular value. JavaScript engines no longer use this algorithm, but it still affects Internet Explorer because of nonnative JavaScript objects (such as DOM elements) being accessed in JavaScript.</li>\n<li>Reference counting causes problems when circular references exist in code.</li>\n<li>Dereferencing variables helps not only with circular references but also with garbage collection in general. To aid in memory reclamation, global objects, properties on global objects, and circular references should all be dereferenced when no longer needed.</li>\n</ul>\n<h1 id=\"chapter-5\" style=\"position:relative;\"><a href=\"#chapter-5\" aria-label=\"chapter 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Chapter 5</h1>\n<h2 id=\"为什么可以直接对primitive-type-call方法\" style=\"position:relative;\"><a href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E5%AF%B9primitive-type-call%E6%96%B9%E6%B3%95\" aria-label=\"为什么可以直接对primitive type call方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>为什么可以直接对primitive type call方法</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">'some text'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token const\">s2</span> <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'some'</span></code></pre></div>\n<p>以上代码可以执行，是因为每次对primitive type读时，js引擎背后都会将其先转换为一个object再call方法。三个步骤：</p>\n<ol>\n<li>Create and instance of the <code class=\"language-text\">String</code> type.</li>\n<li>Call the specified method on the instance.</li>\n<li>Destroy the instance.</li>\n</ol>\n<p>因此，上述代码的运行机制与如下展示的代码相同：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> s1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token let\">s2</span> <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns1 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>所以以下代码会返回undefined的原理是因为，当执行至第三行时，s1在第二行被建立的实例wrapper已经被销毁，而第三行新的s1实例是没有color这个属性的。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">'some text'</span><span class=\"token punctuation\">;</span>\ns1<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>注意：以下两种使用<code class=\"language-text\">Number</code>函数的方式是不同的。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"25\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token let\">number</span> <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// casting function</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"number\"</span>\n<span class=\"token keyword\">let</span> <span class=\"token let\">obj</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// constructor</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// object</span></code></pre></div>\n<p>使用<code class=\"language-text\">new</code>时，我们实际上使用的是构造函数，所以typeof返回的是object。而直接使用时其实我们是在使用一个类型转换，所以返回的值的typeof依然是number。</p>\n<h3 id=\"boolean-object\" style=\"position:relative;\"><a href=\"#boolean-object\" aria-label=\"boolean object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Boolean object</h3>\n<p>使用Boolean object的时候要格外的小心。考虑如下例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> falseObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token let\">result</span> <span class=\"token operator\">=</span> falseObject <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token let\">falseValue</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\nresult <span class=\"token operator\">=</span> falseValue <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nfalseObject <span class=\"token operator\">==</span> falseValue<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nfalseObject <span class=\"token operator\">===</span> falseValue<span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>js会将所有object都隐式看待为true，所以第一种情况的result是true。实际生产环境中应尽量避免Boolean object的使用。</p>\n<h3 id=\"number类的一些gotcha\" style=\"position:relative;\"><a href=\"#number%E7%B1%BB%E7%9A%84%E4%B8%80%E4%BA%9Bgotcha\" aria-label=\"number类的一些gotcha permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Number类的一些gotcha</h3>\n<ol>\n<li>JS的所有数字类型都是用IEEE754存储的double precision floating类型。ES6之后可以用<code class=\"language-text\">Number.isInteger</code>来判断一个Number是否为整数。除此之外，<code class=\"language-text\">Number.isSafeInteger</code>可以来判断Number是否在合法的整数范围之内，也就是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>5</mn></msup><mn>3</mn><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-2^53+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>至<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>5</mn></msup><mn>3</mn><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^53-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>。</li>\n</ol>\n<h2 id=\"string\" style=\"position:relative;\"><a href=\"#string\" aria-label=\"string permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String</h2>\n<h3 id=\"ascii或者encoding与string值的转换\" style=\"position:relative;\"><a href=\"#ascii%E6%88%96%E8%80%85encoding%E4%B8%8Estring%E5%80%BC%E7%9A%84%E8%BD%AC%E6%8D%A2\" aria-label=\"ascii或者encoding与string值的转换 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ascii或者encoding与string值的转换</h3>\n<p>算法题中经常需要对某个字符的ascii码进行操作，在JS中可以进行这样的操作：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> <span class=\"token string\">'abcde'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 99, 'c'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'c'</span></code></pre></div>\n<p>因为JS中没有char的数据类型，所以当我们确定一个字符串只有一个字符时，<code class=\"language-text\">charCodeAt()</code>方法可以不给index 0且直接返回字符的ascii码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> char <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 97</span></code></pre></div>\n<p>此外，<code class=\"language-text\">String.fromCharCode</code>方法不止可以接受一个argument。我们可以用它来转换一个字符串：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span> <span class=\"token number\">98</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'abcde'</span></code></pre></div>\n<p>当使用UTF-16的字符时，上述的<code class=\"language-text\">fromCharCode</code>方法可能会不太好用，因为这个方法假设每个argument都是0-65536的正整数，也就是16个bits所能表达的所有数字。如果我们确定正在处理的字符串是存在utf-16的字符时，我们应该使用<code class=\"language-text\">codePointAt</code>以及<code class=\"language-text\">fromCodePoint</code>来代替<code class=\"language-text\">charCodeAt</code>和<code class=\"language-text\">fromCharCode</code>。所以就会出现如下的情况：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">128522</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"\"</span>\nString<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">55357</span><span class=\"token punctuation\">,</span><span class=\"token number\">56842</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"😊\"</span>\nString<span class=\"token punctuation\">.</span><span class=\"token function\">fromCodePoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">128522</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"😊\"</span></code></pre></div>\n<h4 id=\"stringprototypesubstring和stringprototypesubstr的区别\" style=\"position:relative;\"><a href=\"#stringprototypesubstring%E5%92%8Cstringprototypesubstr%E7%9A%84%E5%8C%BA%E5%88%AB\" aria-label=\"stringprototypesubstring和stringprototypesubstr的区别 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">String.prototype.substring</code>和<code class=\"language-text\">String.prototype.substr</code>的区别</h4>\n<p><code class=\"language-text\">substring</code>是java的substring方法，也就是说第一个argument是子字符串开始的index，第二个argument是结束的index，左闭右开。而<code class=\"language-text\">substr</code>是c++的substring方法，也就是说第一个argument是子字符串的开始index，第二个argument是子字符串的长度。如果不给第二个argument的话，两个方法是一样的。</p>\n<h2 id=\"chapter-5-summary-摘抄\" style=\"position:relative;\"><a href=\"#chapter-5-summary-%E6%91%98%E6%8A%84\" aria-label=\"chapter 5 summary 摘抄 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Chapter 5 Summary (摘抄)</h2>\n<p>Objects in JavaScript are called reference values, and several built-in reference types can be used to create specific types of objects, as follows:</p>\n<ul>\n<li>Reference types are similar to classes in traditional object-oriented programming but are implemented differently.</li>\n<li>The <code class=\"language-text\">Date</code> type provides information about dates and times, including the current date and time and calculations.</li>\n<li>The <code class=\"language-text\">RegExp</code> type is an interface for regular-expression support in ECMAScript, providing most basic and some advanced regular-expression functionality.</li>\n</ul>\n<p>One of the unique aspects of JavaScript is that functions are actually instances of the <code class=\"language-text\">Function</code> type, meaning functions are objects. Because functions are objects, functions have methods that can be used to augment how they behave.</p>\n<p>Because of the existence of primitive wrapper types, primitive values in JavaScript can be accessed as if they were objects. There are three primitive wrapper types: <code class=\"language-text\">Boolean</code>, <code class=\"language-text\">Number</code> and <code class=\"language-text\">String</code>. They all have the following characteristics:</p>\n<ul>\n<li>Each of the wrapper types maps to the primitive type of the same name.</li>\n<li>When a primitive value is accessed in read mode, a primitive wrapper object is instantiated so that it can be used to manipulate the data.</li>\n<li>As soon as a statement involving a primitive value is executed, the wrapper object is destroyed.</li>\n</ul>\n<p>There are also two built-in objects that exist at the beginning of code execution: <code class=\"language-text\">Global</code> and <code class=\"language-text\">Math</code>. The <code class=\"language-text\">Global</code> object isn’t accessible in most ECMAScript implementations; however, web browser implement it as the <code class=\"language-text\">window</code> object. The <code class=\"language-text\">Global</code> object contains all global variables and functions as properties. The <code class=\"language-text\">Math</code> object contains properties and methods to aid in complex mathematical calculations.</p>","frontmatter":{"title":"JS红宝书学习笔记2","date":"August 16, 2020","description":"红宝书从头到尾通读第一遍学习笔记第二篇"}}},"pageContext":{"slug":"/PJSWD02/","previous":{"fields":{"slug":"/PJSWD01/"},"frontmatter":{"title":"JS红宝书学习笔记1"}},"next":null}}}