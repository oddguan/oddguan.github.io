{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogs/leetcode143/","result":{"data":{"site":{"siteMetadata":{"title":"Chenxiao's Blog","author":"Chenxiao Guan"}},"markdownRemark":{"id":"0f17b513-b823-534e-8c66-9500a9829ee7","excerpt":"题目描述 Given a singly linked list L: L0→L1→…→Ln-1→Ln,\nreorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→… You may not modify the values in the list’s nodes, only nodes itself…","html":"<h3>题目描述</h3>\n<p>Given a singly linked list L: L0→L1→…→Ln-1→Ln,\nreorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…</p>\n<p>You may not modify the values in the list’s nodes, only nodes itself may be changed.</p>\n<p>Example 1:</p>\n<blockquote>\n<p>Given 1->2->3->4, reorder it to 1->4->2->3.</p>\n</blockquote>\n<p>Example 2:</p>\n<blockquote>\n<p>Given 1->2->3->4->5, reorder it to 1->5->2->4->3.</p>\n</blockquote>\n<h3>解题思路</h3>\n<p>第一点想到的是先找到中点，将后半段推上一个stack，然后依次将前半段和后半段从stack上pop下来连在一起即可。可以用一个runner找到中点。同样的思路我们也可以不用runner，直接将整体list推上stack，然后只将一半pop下来即可。我最初的implementation是后者：</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">reorderList</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>head<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        ListNode<span class=\"token operator\">*</span> current <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        stack<span class=\"token operator\">&lt;</span>ListNode<span class=\"token operator\">*</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            current <span class=\"token operator\">=</span> current<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        current <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> mid<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            ListNode<span class=\"token operator\">*</span> next <span class=\"token operator\">=</span> current<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n            current<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            current<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n            current <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        current<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> </code></pre></div>\n<p>runtime 76%，memory 23%。很明显我们在空间复杂度上有优化空间。</p>","frontmatter":{"title":"LeetCode 143: Reorder List","date":"September 19, 2019","description":"Linked List question, reverse linked list, stack, pointers"}}},"pageContext":{"slug":"/leetcode143/","previous":{"fields":{"slug":"/resume/"},"frontmatter":{"title":"Chenxiao Guan Resume - Software Engineer"}},"next":{"fields":{"slug":"/leetcode123/"},"frontmatter":{"title":"Best Time to Buy and Sell Stock III"}}}}}