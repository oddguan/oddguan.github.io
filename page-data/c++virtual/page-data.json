{"componentChunkName":"component---src-templates-blog-post-js","path":"/c++virtual/","result":{"data":{"site":{"siteMetadata":{"title":"Chenxiao's Blog","author":"Chenxiao Guan"}},"markdownRemark":{"id":"456e2e8c-a013-5259-ba21-c75010a3da08","excerpt":"It is pretty common to be asked “what does the  keyword in C++ do?” during an interview, if you are interviewing a C++ position. This blog post explains what…","html":"<p>It is pretty common to be asked “what does the <code class=\"language-text\">virtual</code> keyword in C++ do?” during an interview, if you are interviewing a C++ position. This blog post explains what the <code class=\"language-text\">virtual</code> keyword does in a simple term.</p>\n<p>Suppose we have the following C++ program:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Entity</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    std<span class=\"token operator\">::</span>string <span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Entity\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Player</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> Entity <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    std<span class=\"token operator\">::</span>string m_name<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Player</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        m_name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    std<span class=\"token operator\">::</span>string <span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> m_name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Entity <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Entity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token operator\">-></span><span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n    Player <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Player</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Chenxiao\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token operator\">-></span><span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As we can see, it is a pretty simple program that utilizes inheritance in C++. We have an <code class=\"language-text\">Entity</code> base class that basically only has one member function (method), and all it does is just printing a constant literal string “Entity”. Then we have a <code class=\"language-text\">Player</code> class that inherits from the <code class=\"language-text\">Entity</code> class, and has its own version of the <code class=\"language-text\">GetName</code> method. </p>\n<p>In our main function, we intialize a pointer to a new <code class=\"language-text\">Entity</code> object, and call the <code class=\"language-text\">GetName</code> method of it. We then create a new <code class=\"language-text\">Player</code> object and does the same thing. The result of this program should be pretty straightforward, and it prints:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Entity\nChenxiao</code></pre></div>\n<p>Simple, but now lets make it more complicated.</p>\n<p>Suppose in addition to something that we did above, we have another pointer that points to the player object, like the code below:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Entity <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Entity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token operator\">-></span><span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n    Player <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Player</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Chenxiao\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token operator\">-></span><span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n    Entity <span class=\"token operator\">*</span>entity <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> entity<span class=\"token operator\">-></span><span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span>std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This won’t throw a compiler error because of polymorphism, but the behavior of this program is somewhat unexpected to most of us:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Entity\nPlayer\nEntity</code></pre></div>\n<p>Although <code class=\"language-text\">p</code> is a <code class=\"language-text\">Player</code> object, it is an <code class=\"language-text\">Entity</code> as well, and when we refer to it by using the <code class=\"language-text\">Entity</code> class, it will behave just like the <code class=\"language-text\">Entity</code> class.</p>\n<p>Another example to demonstrate this is by using a simple function call. Suppose we have a function that takes an <code class=\"language-text\">Entity</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">LogEntityName</span><span class=\"token punctuation\">(</span>Entity<span class=\"token operator\">*</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token operator\">-></span><span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If we pass those two objects into this function, just like so demonstrated below:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Entity <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Entity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Player <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Player</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Chenxiao\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">LogEntityName</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">LogEntityName</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Again, this won’t throw a compiler error because of polymorphism. But instead of getting “Entity” and “Player”, we will get this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Entity\nEntity</code></pre></div>\n<p>Then how are we going to tell C++ that which is the correct version of the method <code class=\"language-text\">GetName</code> to look for? That’s where the <code class=\"language-text\">virtual</code> keyword comes in. </p>\n<p>Instead of writing what we had above in the class definitions, we can have something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Entity</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Entity\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Player</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> Entity <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    std<span class=\"token operator\">::</span>string m_name<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Player</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        m_name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    std<span class=\"token operator\">::</span>string <span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> override <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> m_name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Notice that we added the keyword <code class=\"language-text\">virtual</code> to the base version of the method <code class=\"language-text\">GetName</code>. What this will do is that C++ generates a vtable for us and it maps the base version method to the method that we overrode in our children classes. </p>\n<p>Besides, I added the keyword <code class=\"language-text\">override</code> in the child version of the <code class=\"language-text\">GetName</code> method as well. This is not required, and is just introduced in C++11, but it helps you develop your code because it can now identify which base method you are referring to. For example, when you write your child class and wants to have a method <code class=\"language-text\">GetName</code>, and you had a typo to the new name and typed <code class=\"language-text\">Getname</code>, C++ will not look for the base version of <code class=\"language-text\">GetName</code> and you code will compile just fine. But, if you always use the keyword <code class=\"language-text\">override</code>, the typo version of the method will throw an compiler error to you, which helps you correct the typo before runtime.</p>\n<p>Therefore, if we now run our program, it will produce:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Entity\nChenxiao</code></pre></div>","frontmatter":{"title":"Virtual Functions in C++","date":"May 09, 2019","description":"A simple example to demonstrate how `virtual` keyword in C++ works, and why and when you should use it. "}}},"pageContext":{"slug":"/c++virtual/","previous":{"fields":{"slug":"/leetcode55/"},"frontmatter":{"title":"LeetCode 55: Jump Game"}},"next":{"fields":{"slug":"/cppvector/"},"frontmatter":{"title":"How to implement std::vector in C++"}}}}}